import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
    	Double totalPrice = (double) 0;
    	Double deductPrice = (double) 0;
    	ArrayList<String> dishStrings = new ArrayList<String>();
    	ArrayList<Integer> counts = new ArrayList<Integer>();
    	ArrayList<Double> totals = new ArrayList<Double>();
    	ArrayList<String> halfPriceDishArrayList = new ArrayList<String>();
    	ArrayList<String> dishItemStrings = new ArrayList<String>();
    	
    	String accumulatedInformation = "";
    	
//    	inputs.add("\"ITEM0001 x 1\"");
//    	inputs.add("\"ITEM0013 x 2\"");
//    	inputs.add("\"ITEM0022 x 1\"");
    	
//    	inputs.add("\"ITEM0013 x 4\"");
//    	inputs.add("\"ITEM0022 x 1\"");
    	
    	//inputs.add("\"ITEM0013 x 4\"");
    	
    	//System.out.println(inputs);
    	Map<String, Integer> map = new HashMap<String, Integer>();
    	//TODO: write code here
    	for(String input:inputs) {
    		input = input.trim();
    		input = input.substring(1, input.length()-1);
    		//System.out.println(input);
    		String[] inputMapStrings = input.split("x");
    		map.put(inputMapStrings[0].trim(), Integer.parseInt(inputMapStrings[1].trim()));
    	}
    	
    	//System.out.println(map);
    	List<Item> items = itemRepository.findAll();
    	List<SalesPromotion> salesPromotions = salesPromotionRepository.findAll();
    	SalesPromotion halfPriceSalesPromotion = null;
    	for(SalesPromotion sp:salesPromotions) {
    		if(sp.getType().equalsIgnoreCase("Half Price")) {
    			halfPriceSalesPromotion = sp;
    			break;
    		}
    	}
    	
    	List<String> relatedItemStrings = halfPriceSalesPromotion.getRelatedItems();
    	
    	for(Map.Entry<String, Integer> entry:map.entrySet()) {
    		for(Item item : items) {
    			if(item.getId().equalsIgnoreCase(entry.getKey())) {
    				dishStrings.add(item.getName());
    				counts.add(entry.getValue());
    				totals.add(entry.getValue()*item.getPrice());
    				if(relatedItemStrings.contains(entry.getKey())) {
    					halfPriceDishArrayList.add(item.getName());
    					for(String relatedItem:relatedItemStrings) {
        					if(relatedItem.equalsIgnoreCase(item.getId())) {
        						deductPrice += item.getPrice()/2*entry.getValue();
        						totalPrice += item.getPrice()*entry.getValue();
        					}
        				}
    				}else {
    					totalPrice += item.getPrice()*entry.getValue();
    				}
    			}
    		}
    	}
    	
    	if((!halfPriceDishArrayList.isEmpty() && deductPrice>6)||(!halfPriceDishArrayList.isEmpty() && totalPrice<30)) {
    		accumulatedInformation += "============= Order details =============\n";
    		
    		for (int i = 0; i < dishStrings.size(); i++) {
    			dishItemStrings.add(dishStrings.get(i)+" x "+counts.get(i)+" = "+totals.get(i).intValue()+" yuan\n");
			}
    		Collections.sort(dishItemStrings);
    		for(String dishItem:dishItemStrings) {
    			accumulatedInformation += dishItem;
    		}
    		
    		accumulatedInformation += "-----------------------------------\n";
    		accumulatedInformation += "Promotion used:\n";
    		accumulatedInformation += "Half price for certain dishes ("+getAndString(halfPriceDishArrayList)+"), saving "+deductPrice.intValue()+" yuan\n";
    		accumulatedInformation += "-----------------------------------\n";
    		accumulatedInformation += "Total: "+(totalPrice.intValue()-deductPrice.intValue())+" yuan\n";
    		accumulatedInformation += "===================================";
//============= Order details =============
//Braised chicken x 1 = 18 yuan
//Chinese hamburger x 2 = 12 yuan
//Cold noodles x 1 = 8 yuan
//-----------------------------------
//Promotion used:
//Half price for certain dishes (braised chicken and cold noodles), saving 13 yuan
//-----------------------------------
//Total: 25 yuan
//===================================
    	}else if(totalPrice>=30){
    		accumulatedInformation += "============= Order details =============\n";
    		
    		for (int i = 0; i < dishStrings.size(); i++) {
    			dishItemStrings.add(dishStrings.get(i)+" x "+counts.get(i)+" = "+totals.get(i).intValue()+" yuan\n");
			}
    		Collections.sort(dishItemStrings);
    		for(String dishItem:dishItemStrings) {
    			accumulatedInformation += dishItem;
    		}
    		
    		accumulatedInformation += "-----------------------------------\n";
    		accumulatedInformation += "Promotion used:\n";
    		accumulatedInformation += "Deduct 6 yuan when the order reaches 30 yuan, saving 6 yuan\n";
    		accumulatedInformation += "-----------------------------------\n";
    		accumulatedInformation += "Total: "+(totalPrice.intValue()-6)+" yuan\n";
    		accumulatedInformation += "===================================";
    	}else {
    		accumulatedInformation += "============= Order details =============\n";
    		
    		for (int i = 0; i < dishStrings.size(); i++) {
    			dishItemStrings.add(dishStrings.get(i)+" x "+counts.get(i)+" = "+totals.get(i).intValue()+" yuan\n");
			}
    		Collections.sort(dishItemStrings);
    		for(String dishItem:dishItemStrings) {
    			accumulatedInformation += dishItem;
    		}
    		
    		accumulatedInformation += "-----------------------------------\n";
    		accumulatedInformation += "Total: "+(totalPrice.intValue())+" yuan\n";
    		accumulatedInformation += "===================================";
    	}
    	
    	//System.out.println(accumulatedInformation);
        return accumulatedInformation;
    }
    
    public double getPriceById(String dishId) {
    	List<Item> items = itemRepository.findAll();
    	for(Item item:items) {
    		if(item.getId().equalsIgnoreCase(dishId)) {
    			return item.getPrice();
    		}
    	}
    	return 0;
	}
    
    public String getAndString(List<String> list) {
    	Collections.sort(list);
    	
    	String listString = "";
    	for(String str:list) {
    		listString += str.toLowerCase() + " and ";
    	}
    	listString = listString.substring(0, listString.length()-5);
    	System.out.println(listString);
    	return listString;
    }
}
